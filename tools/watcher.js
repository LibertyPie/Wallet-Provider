/**
 * WalletProvider 
 * @license MIT 
 * @author https://github.com/libertypie
 */
const fs = require("fs").promises
const path = require("path")
var watch = require('node-watch');
var sass = require('node-sass');
require("colors")
var glob = require("glob").Glob

const arg = require('arg');

const args = arg({
	// Types
	'--help':    Boolean,
	'--watch_dir':   Boolean,
    '--path':    String,      
    
	// Aliases
	'-d':        '--watch_dir',
	'-p':        '--path'
});

function watchDir(pathToWatch){

    watch(pathToWatch, { recursive: true }, async (evt, path) => {
        processFile(path)
    });
}

/**
 * processedData
 * @param {*} path 
 */
async function processFile(filePath){
      
    let fileExt =  filePath.split('.').pop();
    
    if(fileExt == "scss"){

        let destFile = await getDestinationPath(filePath);

        dataToEs6Module(filePath,destFile,true)
    } else if(/(png|svg)/.test(fileExt)){

        let destFile = await getDestinationPath(filePath);

        
        let processedImg = "";

        if(fileExt == "svg"){
            let fileData = (await fs.readFile(filePath,'utf8')).toString()
            const encoded = encodeURIComponent(fileData)
                                .replace(/'/g, '%27')
                                .replace(/"/g, '%22')
            processedImg = `data:image/svg+xml,${encoded}`;
        } else {

            let fileData = (await fs.readFile(filePath,'base64')).toString()

            processedImg = `data:image/${fileExt};base64,${fileData}`
        }

        let parseFilePath = path.parse(filePath)

        let fileNameWithExt = parseFilePath.name;

        //lets create basic style
        let imgStyle = `.${fileNameWithExt}_icon{background-image:url('${processedImg}');}`;

        dataToEs6Module(imgStyle,destFile,false)
    }
} //end fun

/**
 * scanAndProcess
 * @param {*} path 
 */
async function scanDirAndProcess(dir){
    
    let options = {
        cwd: path.resolve(dir),
        nodir: true,
        absolute: true
    }

    glob("**/*", options, function (err, files) {
        
        if(err){
            console.log(err,err.stack); 
            return;
        }

        files.forEach(async(file) => {
            processFile(file)
        });
    });
}

/**
 * fileExists
 */
async function pathExists(path){
    try {
        await fs.stat(path)
        return true;
    } catch(err){  
        if (err.code === 'ENOENT') {
            return false
        }
        console.log(e,e.stack)
    }
}

/**
 * convert sass to es6 module
 */
const dataToEs6Module = (srcData, destFilePath, isSrcAFile = true) => {

    let opts = {
        outputStyle: "compressed"
    }

    if(isSrcAFile){
        opts.file = srcData;
    } else {
        opts.data = srcData
    }
    
    sass.render(opts, async function(err, result) {

        console.log(`Writing Typescript module at ${destFilePath}`)

        if(err){
            console.log(err,err.stack)
            return false;
        }   

        let compiledCss = result.css.toString().trim();

        let moduleCode = `
        /**
         * @license MIT 
         * @author https://github.com/libertypie
         * This file was auto generated by tools/watcher.js
         * do not edit this, edit src/styles/main.scss rather
         */

        let styleData = \`${compiledCss}\`;
        export default styleData;
        `
        try{
            await fs.writeFile(destFilePath,moduleCode)
        } catch(e){
            console.log(e,e.stack)
        }

    });

} //end fun

/**
 * getDestinationPath
 */
const getDestinationPath = async (srcPath) => {

    let fileInfo = path.parse(srcPath); 

    let fileNameWithoutExt = fileInfo.name;
    let fileDir = fileInfo.dir;

    let destDir = `${fileDir}/modules/`

    if(!(await pathExists(destDir))){
       try{ await fs.mkdir(destDir) } catch(e){}
    }

    let destFilePath = `${destDir}/${fileNameWithoutExt}.ts`
    
    return destFilePath;
}//end fun 

//lets check watch
let shouldWatch = args["--watch_dir"] || false;
let pathToWatch = args["--path"] || "";

if(shouldWatch){
    watchDir(pathToWatch)
}

scanDirAndProcess(pathToWatch)